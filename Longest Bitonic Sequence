// Find the length of the longest bitonic sequence. A bitonic sequence is the one which is first increasing and then decreasing.


package dp;

public class LongestBitonicSequence {

	public static int bitonic(int arr[]) {
		int n = arr.length;
		int ltor[] = new int[n];
		int rtol[] = new int[n];
		for (int i = 0; i < n; i++) {
			ltor[i] = 1;
			rtol[i] = 1;
		}
		int max = 0;
		for (int i = 1; i < arr.length; i++) {
			for (int j = 0; j < i; j++) {
				if (arr[i] > arr[j])
					ltor[i] = Math.max(ltor[i], ltor[j] + 1);
			}
		}
		for (int i = arr.length - 2; i >= 0; i--) {
			for (int j = arr.length - 1; j > i; j--) {
				if (arr[i] > arr[j])
					rtol[i] = Math.max(rtol[i], rtol[j] + 1);
			}
		}
		for (int i = 0; i < n; i++) {
			if (max < ltor[i] + rtol[i] - 1)
				max = ltor[i] + rtol[i] - 1;
		}
		return max;
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		
	}

}
