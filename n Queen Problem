// You are supposed to place n Queens on an nXn chess board safely.

package backtracking;

import java.util.Scanner;

public class NQueenProblem {

	public static boolean isSafe(int board[][], int row, int col, int n) {

		for (int i = 0; i < n; i++) {
			if (board[row][i] == 1) {
				return false;
			}
		}
		for (int i = 0; i < n; i++) {
			if (board[i][col] == 1) {
				return false;
			}
		}
		// check the left diagonal
		int i = row;
		int j = col;

		while (i >= 0 && j >= 0) {
			if (board[i][j] == 1) {
				return false;
			}
			i--;
			j--;

		}
		// for the right diagonal
		i = row;
		j = col;
		while (i >= 0 && j < n) {
			if (board[i][j] == 1) {
				return false;
			}
			i--;
			j++;
		}
		return true;
	}

	public static boolean nQueen(int board[][], int n, int i) {

		if (i == n) {

			for (int k = 0; k < n; k++) {
				for (int j = 0; j < n; j++) {
					if (board[k][j] == 1) {
						System.out.print("Q ");
					} else {
						System.out.print("- ");
					}
				}
				System.out.println();

			}
			System.out.println();
			return false; // successfully placed the queens in n rows
		}
		for (int j = 0; j < n; j++) {
			if (isSafe(board, i, j, n)) {
				board[i][j] = 1;
				boolean nextQueen = nQueen(board, n, i + 1);
				if (nextQueen) {
					return true;
				}
				board[i][j] = 0;
			}
		}
		return false; // queen not placed
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner s = new Scanner(System.in);
		int n = s.nextInt();
		int[][] board = new int[n][n];
		System.out.println(nQueen(board, n, 0));

	}

}
