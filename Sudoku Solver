// We can solve a sudoku using Backtracking. The given code ues the same concept on a 4x4 matrix.

package backtracking;

public class SudokuSolver {

	public static boolean sudokuSolver(int board[][]) {
		int row = -1;
		int col = -1;
		boolean isEmpty = false;

		for (int i = 0; i < 4; i++) {
			for (int j = 0; j < 4; j++) {
				if (board[i][j] == 0) {
					isEmpty = true;
					row = i;
					col = j;
					break;
				}
			}
			if (isEmpty) {
				break;
			}
		}
		if (!isEmpty) {
			return true;
		}
		for (int num = 1; num <= 4; num++) {
			if (canPlaceNum(board, row, col, num) == true) {
				board[row][col] = num;
				if (sudokuSolver(board)) { // check if we can solve the sudoku by placing the number there
					return true;
				}
				board[row][col] = 0; // else place zero only
			}
		}
		return false;
	}

	public static boolean isRowSafe(int board[][], int row, int num) {
		for (int j = 0; j < 4; j++) {
			if (board[row][j] == num) {
				return false;
			}

		}
		return true;
	}

	public static boolean isColSafe(int board[][], int col, int num) {
		for (int i = 0; i < 4; i++) {
			if (board[i][col] == num) {
				return false;
			}
		}
		return true;
	}

	public static boolean isBoxSafe(int board[][], int row, int col, int num) {
		int rowStart = row - row % 2;	// for a 3x3 sudoku, it will be row - row % 3
		int colStart = col - col % 2;

		for (int i = rowStart; i < 2 + rowStart; i++) {
			for (int j = colStart; j < 2 + colStart; j++) {
				if (board[i][j] == num) {
					return false;
				}
			}
		}
		return true;
	}

	public static boolean canPlaceNum(int[][] board, int row, int col, int num) {
		if (!isRowSafe(board, row, num)) {
			return false;
		}
		if (!isColSafe(board, col, num)) {
			return false;
		}
		if (!isBoxSafe(board, row, col, num)) {
			return false;
		} else {
			return true;
		}
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		int board[][] = { { 1, 3, 0, 4 }, { 2, 0, 3, 1 }, { 0, 1, 0, 2 }, { 4, 0, 1, 2 } };
		System.out.println(sudokuSolver(board));
	}

}
